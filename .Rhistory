# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("dplyr")
install.packages('nycflights13')
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(dplyr)
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
library('nycflights13')
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
data.frame(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
data <- data.frame(flights)
??data
View(data)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(data, 'air_delay', data$dep_delay - data$arr_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(data,'air delay' data$dep_delay - data$arr_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(data, data$dep_delay - data$arr_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(data$"air_delay", data$dep_delay - data$arr_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(data, data$dep_delay - data$arr_delay)
library('nycflights13')
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(data, "air_delay" = dep_delay - arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arranged_data <- arrange(data, air_delay)
View(data)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
data <- mutate(data, "air_delay" = dep_delay - arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arranged_data <- arrange(data, air_delay)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
pipe_data <- data %>%
mutate("air_delay" = dep_delay - arr_delay) %>%
arrange(air_delay)
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages(pscl)
install.packages("pscl")
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(dplyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(tidyr)
install.packages("tidey-er")
install.packages("tidyr")
library(tidyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
View(outcome)
library(nycflights13)
flights
View(flights)
test <- flights %>%
gather(key = dest, value = arr_delay)
View(test)
test <- flights %>%
select(arr_delay,dest)
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
group_by(dest)
View(test)
library(nycflights13)
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest)
View(test)
library(nycflights13)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
group_by(dest)
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
mutate(mean = mean(group_by(dest)))
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
spread(key = dest, value = arr_delay)
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
spread(key = arr_delay, value = dest)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
spread(key = dest)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
mutate(avr <- mean(arr_delay))
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
mutate(avr <- mean(arr_delay)) %>%
arrange(avr)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
mutate(avr = mean(arr_delay)) %>%
arrange(avr)
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
#arrange(dest) %>%
mutate(avr = mean(arr_delay)) %>%
arrange(avr)
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
#arrange(dest) %>%
mutate(avr = na.omit(mean(arr_delay))) %>%
arrange(avr)
test <- flights %>%
select(arr_delay,dest) %>%
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
library(nycflights13)
test <- flights %>%
select(arr_delay,dest)
test <- flights %>%
select(arr_delay,dest) %>%
mutate(avr = mean(group_by(dest)))
test <- flights %>%
select(arr_delay,dest) %>%
mutate(avr = mean(group_by(arr_delay)))
group_by(dest)
group_by(flights$dest)
test <- flights %>%
group_by(dest) %>%
summarize(avg = mean()) %>%
filter(avg == max(avg)) %>%
select(dest)
test <- flights %>%
group_by(dest) %>%
summarize(avg = mean(arr_delay)) %>%
filter(avg == max(avg)) %>%
select(dest)
View(test)
test <- flights %>%
group_by(dest) %>%
filter(arr_delay > 0) %>%
summarize(avg = mean(arr_delay)) %>%
filter(avg == max(avg)) %>%
select(dest)
View(test)
View(test)
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
install.packages('ggplot2')
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = 'blue'))
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Load packages
library("dplyr")
library("ggmap")
install.packages('ggmap')
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
# Chart option 2: years as continuous
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
install.packages("rsconnect")
install.packages("Rtools")
library(ggplot2)
library(dplyr)
library(leaflet)
library(plotly)
# load in data frame (from ggplot package)
mid_data <- data.frame(midwest) %>%
na.omit()
poverty_college_plot <- function (xcoll, ycoll, color) {
result <- plot_ly(
data = mid_data,
x = ~mid_data[[xcoll]],
y = ~mid_data[[ycoll]],
type = "scatter",
mode = "markers",
color = ~mid_data[[color]]
) %>%
layout(
xaxis = list(title = xcoll),
yaxis = list(title = ycoll)
)
}
get_pov_col <- function(xcoll, ycoll, color) {
return(poverty_college_plot(xcoll, ycoll, color))
}
states <- subset(mid_data, mid_data$)
library(textreadr)
summary_txt <- stri_read_lines("words/SummaryPage.html")
summary_html <- HTML(summary_txt)
View(mid_data)
states <- subset(mid_data, mid_data$state)
states <- mid_data %>%
group_by(state) %>%
select(state)
View(states)
states <- mid_data %>%
unique(state)
states <- mid_data %>%
group_by(state) %>%
select(unique())
states <- mid_data %>%
group_by(state) %>%
select(unique(state))
states <- mid_data %>%
group_by(state) %>%
select(unique(1))
states <- mid_data %>%
group_by(state) %>%
summarise()
View(states)
states <- mid_data %>%
group_by(state) %>%
summarise()
leaflet(states) %>%
addPolygons(color = "red", weight = 1, smoothFactor = .5,
opacity = 1, fillOpacity = .5)
library(ggmap)
library(ggmap2)
library(ggmap)
mid_map <- qmap(location = "Midwest, United States")
mid_map <- qmap(location = "Midwest, United States", source = "google")
google_key <- AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY
google_key <- AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY
google_key <- "AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY"
("api_keys.R")
register_google(key = google_key, write = T)
GGMAP_GOOGLE_API_KEY='AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY"
GGMAP_GOOGLE_API_KEY='AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY"
GGMAP_GOOGLE_API_KEY <- "AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY"
mid_map <- qmap(location = "Midwest, United States", source = "google")
mid_map <- qmap(location = "Midwest, United States", source = "google")
mid_map <- get_map(location = "Midwest, United States", source = "google")
mid_map <- get_map(location = "Midwest, United States", source = "google", zoom = 3)
mid_map <- get_map(location = "texas", source = "google", zoom = 3)
# shinyApp object to be run with app_server.R and app_ui.R
shinyApp(server = my_server, ui = my_ui)
install.packages("googlesheets")
library(googlesheets)
gs_auth(new_user = T)
install.packages("googlesheets4")
library(googlesheets4)
sheets_auth(email = "graueryan@gmail.com")
detach("package:googlesheets", unload = TRUE)
sheets_browse()
library(googledrive)
sheets_browse("test")
sheets_browse("test")
sheets_browse("https://docs.google.com/spreadsheets/d/1f6_ReC-uxhX1_fH1WUSTbIRhf7bmDT4kZGdsbyCt7d4/edit#gid=0")
data <- sheets_read("https://docs.google.com/spreadsheets/d/1f6_ReC-uxhX1_fH1WUSTbIRhf7bmDT4kZGdsbyCt7d4/edit#gid=0")
is.data.frame(data)
setwd("C:/Users/graue/projects/Geoff/Geoff")
source("scripts/id_gen.R")
get_random("RR")
places_d <- mongo(collection = "places", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/")
library(mongolite)
places_d <- mongo(collection = "places", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/")
View(places_d)
places_d$remove()
View(places_d)
places_d <- mongo(collection = "places", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/")
places_d$insert(read.csv("data/places.csv", stringsAsFactors = F))
places_d <- mongo(collection = "places", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/")
places <- places_d$find()
View(places)
places == 'RR38277022'
places$1 == 'RR38277022'
places :1
places[1]
places[ncol()]
places[ncol()-1]
places[ncol(places)]
reviews <- read.csv("data/reviews.csv", stringsAsFactors = F)
View(reviews)
review_d$insert(reviews)
review_d <- mongo(collection = "reviews", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/")
review_d$insert(reviews)
test <- review_d$find()
get_random <- function (prefix, df) {
rand <- round(runif(1) * 100000000, digits = 0)
id <- paste(prefix , rand , sep = "")
if (is_unique(id, df) == TRUE) {
return(id)
} else {
get_random(prefix, df)
}
}
is_unique <- function (id, df){
if(df[ncol(df)] == id) {
return(FALSE)
} else {
return(TRUE)
}
}
reviews <- read.csv("data/reviews.csv", stringsAsFactors = F)
review_d$insert(reviews)
test <- review_d$find()
reviews <- review_d$find()
rm(test)
View(reviews)
shiny::runApp()
View(log_d)
View(credentials)
View(credentials)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("leaflet")
runApp()
install.packages("ggmap")
setwd("C:/Development/Geoff")
runApp()
install.packages("sodium")
runApp()
install.packages("shinydashboard")
runApp()
install.packages("shinyjs")
runApp()
